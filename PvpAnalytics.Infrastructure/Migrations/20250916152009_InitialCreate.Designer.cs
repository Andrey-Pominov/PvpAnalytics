// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PvpAnalytics.Infrastructure;

#nullable disable

namespace PvpAnalytics.Infrastructure.Migrations
{
    [DbContext(typeof(PvpAnalyticsDbContext))]
    [Migration("20250916152009_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PvpAnalytics.Core.Entities.CombatLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CrowdControl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DamageDone")
                        .HasColumnType("integer");

                    b.Property<int>("HealingDone")
                        .HasColumnType("integer");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourcePlayerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TargetPlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("SourcePlayerId");

                    b.HasIndex("TargetPlayerId");

                    b.ToTable("CombatLogEntries");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int>("GameMode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRanked")
                        .HasColumnType("boolean");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniqueHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UniqueHash")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.MatchResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RatingAfter")
                        .HasColumnType("integer");

                    b.Property<int>("RatingBefore")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("MatchId", "PlayerId")
                        .IsUnique();

                    b.ToTable("MatchResults");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Faction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.CombatLogEntry", b =>
                {
                    b.HasOne("PvpAnalytics.Core.Entities.Match", "Match")
                        .WithMany("CombatLogs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PvpAnalytics.Core.Entities.Player", "SourcePlayer")
                        .WithMany("SourceCombatLogs")
                        .HasForeignKey("SourcePlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PvpAnalytics.Core.Entities.Player", "TargetPlayer")
                        .WithMany("TargetCombatLogs")
                        .HasForeignKey("TargetPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Match");

                    b.Navigation("SourcePlayer");

                    b.Navigation("TargetPlayer");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.MatchResult", b =>
                {
                    b.HasOne("PvpAnalytics.Core.Entities.Match", "Match")
                        .WithMany("Results")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PvpAnalytics.Core.Entities.Player", "Player")
                        .WithMany("MatchResults")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.Match", b =>
                {
                    b.Navigation("CombatLogs");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("PvpAnalytics.Core.Entities.Player", b =>
                {
                    b.Navigation("MatchResults");

                    b.Navigation("SourceCombatLogs");

                    b.Navigation("TargetCombatLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
